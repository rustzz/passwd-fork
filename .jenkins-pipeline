pipeline {
    agent {
        docker {
            image 'ubuntu:latest'
            args '-u 0:0'
        }
    }

    stages {
        stage('PREPARE WORKSPACE') {
            steps {
                sh '''
                  #!/bin/sh
                  if [ ! -d env ]; then
                    mkdir env
                  fi
                  echo '>>> CLEAN'
                  if [ -d passwd-fork ]; then
                    rm -rf passwd-fork
                  fi
                  if [ -f linux.tar.xz ]; then
                    rm linux.tar.xz
                  fi
                  if [ -f env/flutter_linux_2.0.0-stable.tar.xz ]; then
                    rm env/flutter_linux_2.0.0-stable.tar.xz
                  fi
                  if [ -f env/commandlinetools-linux-8512546_latest.zip ]; then
                    rm env/commandlinetools-linux-8512546_latest.zip
                  fi
                  echo '>>> DONE CLEAN'
                  echo '>>> INSTALL REQUIREMENTS'
                  apt -q update
                  apt -q install -y git wget zip unzip xz-utils openjdk-11-jdk libsecret-1-dev libgtk-3-dev libblkid-dev liblzma-dev pkg-config clang ninja-build cmake
                  echo '>>> DONE INSTALL REQUIREMENTS'
                  echo '>>> CLONE REPO'
                  git clone https://github.com/rustzz/passwd-fork
                  echo '>>> DONE CLONE REPO'
                '''
            }
        }
        stage('GET FLUTTER') {
            steps {
                sh '''
                  #!/bin/sh
                  if [ ! -d env/.flutter ]; then
                    cd env
                    echo '>>> DOWNLOAD ARCHIVE'
                    wget -nv https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_2.0.0-stable.tar.xz
                    echo '>>> DONE DOWNLOAD ARCHIVE'
                    echo '>>> UNPACK ARCHIVE'
                    tar xf flutter_linux_2.0.0-stable.tar.xz
                    echo '>>> DONE UNPACK ARCHIVE'
                    mv flutter .flutter
                    echo '>>> FIX PERMISSIONS'
                    chown root:root -R .flutter
                    echo '>>> DONE FIX PERMISSIONS'
                  fi
                '''
            }
        }
        stage('GET ANDROID SDK') {
            steps {
                sh '''
                  #!/bin/sh
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  if [ ! -d env/Android ]; then
                      cd env
                      mkdir Android/Sdk -p
                      echo '>>> DOWNLOAD ARCHIVE'
                      wget -nv https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
                      echo '>>> DONE DOWNLOAD ARCHIVE'
                      echo '>>> UNPACK ARCHIVE'
                      unzip -qq commandlinetools-linux-8512546_latest.zip -d Android/Sdk
                      mkdir Android/Sdk/cmdline-tools/latest
                      mv Android/Sdk/cmdline-tools/bin Android/Sdk/cmdline-tools/latest/
                      mv Android/Sdk/cmdline-tools/lib Android/Sdk/cmdline-tools/latest/
                      mv Android/Sdk/cmdline-tools/NOTICE.txt Android/Sdk/cmdline-tools/latest/
                      mv Android/Sdk/cmdline-tools/source.properties Android/Sdk/cmdline-tools/latest/
                      echo '>>> DONE UNPACK ARCHIVE'
                      cd ..
                      echo '>>> INSTALL SDK TOOLS'
                      yes | ./env/Android/Sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME "build-tools;30.0.3" "emulator" "platform-tools" "platforms;android-29" "tools"
                      echo '>>> DONE INSTALL SDK TOOLS'
                  fi
                '''
            }
        }
        stage ('[FLUTTER] ACCEPT LICENSES') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  echo '>>> ACCEPT LICENSES'
                  yes | flutter doctor --android-licenses
                  echo '>>> DONE ACCEPT LICENSES'
                '''
            }
        }
        stage('FLUTTER PRECACHE') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  flutter precache
                '''
            }
        }
        stage('FLUTTER DOCTOR') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  flutter doctor -v
                '''
            }
        }
        stage('GEN KEY') {
            steps {
                sh '''
                  #!/bin/sh
                  cd passwd-fork
                  echo "storePassword=123456" >> android/key.props
                  echo "keyPassword=123456" >> android/key.props
                  echo "keyAlias=key" >> android/key.props
                  echo "storeFile=keystore.key" >> android/key.props
                  keytool -genkey -storepass 123456 -keypass 123456 -v -noprompt -dname "CN=passwd, OU=passwd, O=passwd, L=passwd, S=passwd, C=RU" -keystore android/app/keystore.key -keyalg RSA -keysize 2048 -validity 10000 -alias key
                '''
            }
        }
        stage('FLUTTER CLEAN') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  cd passwd-fork
                  flutter clean
                  flutter pub get
                '''
            }
        }
        stage('FLUTTER TEST') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  cd passwd-fork
                  flutter test
                '''
            }
        }
        stage('BUILD APK') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  cd passwd-fork
                  flutter build apk --release
                  flutter build apk --target-platform android-arm64 --split-per-abi
                  flutter build apk --target-platform android-arm --split-per-abi
                  flutter build apk --target-platform android-x64 --split-per-abi
                '''
            }
        }
        stage('BUILD ANDROID BUNDLE') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  cd passwd-fork
                  flutter build appbundle --release
                '''
            }
        }
        stage('BUILD LINUX BUNDLE') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  cd passwd-fork
                  flutter config --enable-linux-desktop
                  flutter build linux --release
                '''
            }
        }
        stage('CREATE LINUX BUNDLE ARCHIVE') {
            steps {
                sh '''
                  #!/bin/sh
                  cd passwd-fork
                  cd build/linux/release
                  tar cJf ../../../../linux.tar.xz bundle/*
                '''
            }
        }
        stage('MOVE ARTEFACTS') {
            steps {
                sh '''
                  #!/bin/sh
                  cd passwd-fork
                  mkdir files
                  mv build/app/outputs/bundle/release/*-release.aab build/app/outputs/flutter-apk/*-release.apk ../*.xz files/
                '''
            }
        }
        stage('RENAME FILES') {
            steps {
                sh '''
                  #!/bin/sh
                  cd passwd-fork
                  VER=$(grep -A0 'version:' pubspec.yaml | tail -n1 | awk '{ print $2}')
                  cd files
                  mv app-release.aab app-release-$VER.aab
                  mv app-release.apk app-release-$VER.apk
                  mv app-arm64-v8a-release.apk app-arm64-v8a-release-$VER.apk
                  mv app-armeabi-v7a-release.apk app-armeabi-v7a-release-$VER.apk
                  mv app-x86_64-release.apk app-x86_64-release-$VER.apk
                  mv linux.tar.xz linux.$VER.tar.xz
                '''
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'passwd-fork/files/*', fingerprint: true
        }
    }
}