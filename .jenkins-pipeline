pipeline {
    agent {
        docker {
            image 'ubuntu:latest'
            args '-u 0:0'
        }
    }

    stages {
        stage('INSTALL REQUIREMENTS') {
            steps {
                sh '''
                  apt -q update
                  apt -q install -y git wget zip unzip xz-utils openjdk-11-jdk libsecret-1-dev libgtk-3-dev libblkid-dev liblzma-dev pkg-config clang ninja-build cmake
                '''
            }
        }
        stage('CLEAN') {
            steps {
                sh '''
                  #!/bin/sh
                  if [ -d passwd-fork ]; then
                    rm -rf passwd-fork
                  fi
                  if [ -d linux.tar.xz ]; then
                    rm linux.tar.xz
                  fi
                '''
            }
        }
        stage('GIT PULL') {
            steps {
                sh '''
                  #!/bin/sh
                  git clone https://github.com/rustzz/passwd-fork
                '''
            }
        }
        stage('PREPARE WORKSPACE') {
            steps {
                sh '''
                  #!/bin/sh
                  if [ ! -d env ]; then
                    mkdir env
                  fi
                '''
            }
        }
        stage('GET FLUTTER') {
            steps {
                sh '''
                  #!/bin/sh
                  if [ ! -d env/.flutter ]; then
                    cd env
                    wget -nv https://storage.googleapis.com/flutter_infra_release/releases/stable/linux/flutter_linux_2.0.0-stable.tar.xz
                    tar xf flutter_linux_2.0.0-stable.tar.xz
                    mv flutter .flutter
                    chown root:root -R .flutter
                    rm flutter_linux_2.0.0-stable.tar.xz
                  fi
                '''
            }
        }
        stage('GET ANDROID SDK') {
            steps {
                sh '''
                  #!/bin/sh
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  if [ ! -d env/Android ]; then
                      cd env
                      mkdir Android/Sdk -p
                      wget -nv https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip
                      unzip -qq commandlinetools-linux-8512546_latest.zip -d Android/Sdk
                      mkdir Android/Sdk/cmdline-tools/latest
                      mv Android/Sdk/cmdline-tools/bin Android/Sdk/cmdline-tools/latest/
                      mv Android/Sdk/cmdline-tools/lib Android/Sdk/cmdline-tools/latest/
                      mv Android/Sdk/cmdline-tools/NOTICE.txt Android/Sdk/cmdline-tools/latest/
                      mv Android/Sdk/cmdline-tools/source.properties Android/Sdk/cmdline-tools/latest/
                      rm commandlinetools-linux-8512546_latest.zip
                      cd ..
                      yes | ./env/Android/Sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_HOME "build-tools;30.0.3" "emulator" "platform-tools" "platforms;android-29" "tools"
                  fi
                '''
            }
        }
        stage ('ACCEPT LICENSES') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  yes | flutter doctor --android-licenses
                '''
            }
        }
        stage('FLUTTER PRECACHE') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  flutter precache
                '''
            }
        }
        stage('FLUTTER DOCTOR') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  
                  flutter doctor -v
                '''
            }
        }
        stage('GEN KEY') {
            steps {
                sh '''
                  #!/bin/sh
                  cd passwd-fork
                  keytool -genkey -storepass 123456 -keypass 123456 -v -noprompt -dname "CN=passwd, OU=passwd, O=passwd, L=passwd, S=passwd, C=RU" -keystore android/app/keystore.key -keyalg RSA -keysize 2048 -validity 10000 -alias key
                '''
            }
        }
        stage('FLUTTER CLEAN') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  cd passwd-fork
                  flutter clean
                  flutter pub get
                '''
            }
        }
        stage('BUILD APK') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  cd passwd-fork
                  flutter build apk --release
                '''
            }
        }
        stage('BUILD ANDROID BUNDLE') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  cd passwd-fork
                  flutter build appbundle --release
                '''
            }
        }
        stage('BUILD LINUX BUNDLE') {
            steps {
                sh '''
                  #!/bin/sh
                  export PATH=$PATH:$(pwd)/env/.flutter/bin
                  export ANDROID_SDK_ROOT=$(pwd)/env/Android/Sdk
                  export ANDROID_HOME=$(pwd)/env/Android/Sdk
                  cd passwd-fork
                  flutter config --enable-linux-desktop
                  flutter build linux --release
                '''
            }
        }
        stage('CREATE LINUX BUNDLE ARCHIVE') {
            steps {
                sh '''
                  #!/bin/sh
                  cd passwd-fork
                  cd build/linux/release
                  tar cJf ../../../../linux.tar.xz bundle/*
                '''
            }
        }
    }
    
    post {
        always {
            archiveArtifacts artifacts: 'passwd-fork/build/**/*.apk, passwd-fork/build/app/outputs/bundle/release/*.aab, **/*.tar.xz', fingerprint: true
        }
    }
}